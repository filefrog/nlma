#!/usr/bin/perl

#
# nlma - NLMA Local Monitoring Agent
#
# author:  James Hunt <jhunt@synacor.com>
# created: 2012-03-17
#

use warnings;
use strict;

use Nagios::Agent;
use Getopt::Long;
use Cwd qw(abs_path);
use Log::Log4perl qw(:easy);

my $DEFAULT_CONFIG_FILE_PATH = "/etc/nlma.yml";

sub usage
{
	print "USAGE: $0 [-hF] [-vvv] [-c /path/to/config.yml]\n";
	print "\n";
	print "OPTIONS\n";
	print "\n";
	print "  --config, -c /path/to/config.yml\n";
	print "      Specify a different configuration.\n";
	print "      Default is $DEFAULT_CONFIG_FILE_PATH\n";
	print "\n";
	print "  --help, -h, -?\n";
	print "      Show this help message.\n";
	print "\n";
	print "  --foreground, -F\n";
	print "      Don't detach to run in the background.\n";
	print "      By default, nlma tries to daemonize.\n";
	print "\n";
	print " --runall, --test, -t\n";
	print "      Ignore scheduling and execute all configured\n";
	print "      checks serially; useful for testing.\n";
	print "\n";
	print " --only, -o list,of,groups\n";
	print "      Restricts --runall to specific groups defined in\n";
	print "      the config file. Only checks matching the comma\n";
	print "      separated list of groups will be run.\n";
	print "\n";
	print "      This is only applicable with --runall.\n";
	print "\n";
	print " --match, -m match|regex\n";
	print "      Filter the list of checks to run (under --test) to\n";
	print "      checks with names matching the given regular expression.\n";
	print "      Don't forget to quote as needed to avoid bash parsing semantics!\n";
	print "      This is only effective when paired with --test.  If used\n";
	print "      in conjunction with --only, this will only filter the checks\n";
	print "      in the desired groups.\n";
	print "\n";
	print " --all\n";
	print "      By default only the checks with group 'default' (or\n";
	print "      those without a group defined) will be run. This forces\n";
	print "      all checks to be run.\n";
	print "\n";
	print "      This is only applicable with --runall.\n";
	print "\n";
	print " --noop, -n\n";
	print "      When combined with --runall (-t), don't actually\n";
	print "      submit check results up to NSCA listeners.\n";
	print "      Local check plugins will still be executed!\n";
	print "\n";
	print " --verbose, -v\n";
	print "      Increase verbosity.  Can be used multiple\n";
	print "      times for increase verbosity.\n";
	print "\n";
	print " --debug, -D\n";
	print "      Run checks in debug mode.  This mode automatically\n";
	print "      turns on noop mode, also debug mode can only be\n";
	print "      run with one check at a time, use match get only one\n";
	print "      check.\n";
	print "\n";
	print " --trace, -DDD\n";
	print "      Similar to debug mode, but check trace level debugging\n";
	print "      is turned on\n";
	print "\n";
}

my %opt = (
	config => $DEFAULT_CONFIG_FILE_PATH,
	verbose => 0,
	env => '',
	foreground => undef
);

Getopt::Long::Configure qw(bundling);
GetOptions(\%opt,
	"config|c=s",
	"help|h|?",
	"foreground|F",
	"runall|test|t",
	"noop|n",
	"verbose|v+",
	"debug|D+",
	"trace",
	"only|o=s",
	"match|m=s",
	"env=s",
	"all",
);

if ($opt{help}) {
	usage;
	exit(0);
}

if ($opt{runall}) {
	$opt{debug}   = 3 if $opt{trace};
	$opt{verbose} = $opt{debug} if $opt{debug};
	Log::Log4perl->easy_init($INFO)  if $opt{verbose} > 0;
	Log::Log4perl->easy_init($DEBUG) if $opt{verbose} > 1;
}

INFO("Clearing environment variable that affect plugins and the SynaMon::Plugin framework");
for my $var (keys %ENV) {
	next unless $var =~ m/^(SUDO_USER|TEST_)/;
	if ($var =~ m/^$opt{env}$/) {
		INFO("Preserving ENV{$var} (matched --env $opt{env})");
	} else {
		INFO("Deleting ENV{$var} (value='$ENV{$var}')");
		delete $ENV{$var};
	}
}

if ($opt{runall}) {
	$opt{config} = abs_path($opt{config});
	if (!-r $opt{config}) {
		print STDERR "$opt{config}: $!\n";
		exit 1;
	}

	my ($config, $checks) = Nagios::Agent::parse_config($opt{config});
	if (!$config) {
		print STDERR "$opt{config}: bad configuration file (check YAML syntax)\n";
		exit 1;
	}

	$opt{only} = 'default' unless $opt{only};
	$opt{only} = 'all' if $opt{all};
	$checks = Nagios::Agent::filter_checks($checks, $opt{only}, $opt{match});

	print "nlma v$Nagios::Agent::VERSION starting up (running as $config->{user}:$config->{group})\n";
	Nagios::Agent::drop_privs($config->{user}, $config->{group});

	if ($opt{debug}) {
		if(scalar @$checks > 1) {
			print "\nYou can only run one check in DEBUG mode at a time.\n";
			exit 1;
		}
		$opt{noop} = 1;
	}
	print "running ",scalar @$checks," checks ($opt{only})\n" unless $opt{debug};
	print "NOOP: running under --noop; not submitting check results.\n" if $opt{noop};
	print "\n";

	Nagios::Agent->runall($config, $checks, $opt{noop}, $opt{debug});
	print "NOOP: running under --noop; not submitting check results.\n" if $opt{noop};

} else {
	if ($opt{foreground}) {
		my $level = $ERROR;
		my $name  = "ERROR";

		if ($opt{verbose} == 1) {
			$level = $WARN;
			$name  = "WARN";

		} elsif ($opt{verbose} == 2) {
			$level = $INFO;
			$name  = "INFO";

		} elsif ($opt{verbose} >= 3) {
			$level = $DEBUG;
			$name  = "DEBUG";
		}
		Log::Log4perl->easy_init($level);
		ALWAYS("log level set to $name");
	}
	Nagios::Agent->start($opt{config}, $opt{foreground});
}

=head1 NAME

B<nlma> - The NLMA Local Monitoring Agent

=head1 SYNOPSIS

nlma [-hFvtn] [-c /path/to/config.yml]

nlma -t [--all] [--only group1,group2,etc.] [--noop]

=head1 DESCRIPTION

NLMA is a host-side monitoring agent that schedules and runs
check plugins on the local host, translates their output and exit codes,
and then reports this information up to one or more Nagios parent
servers via NSCA.

It features a high-resolution clock for both scheduling and tracking plugin
runs, and also implements retry logic similar to what Nagios uses for its
active checks.

=head1 OPTIONS

=over

=item B<--config>, B<-c> I</path/to/config.yml>

By default, nlma uses /etc/nlma.yml for configuration of both behavior
and check definitions; this option lets you specify a different path.

=item B<--foreground>, B<-F>

Force nlma to remain in the foreground, instead of forking off as a daemon
process.  In foreground mode, nlma will automatically redirect all logging
to standard error, and honor the B<-v> flags.

=item B<--runall>, B<--test>, B<-t>

Perform a single pass through all configured checks, ignoring the schedule.
Details of each check being run, including name, command and its output,
will be printed to standard output.

This flag is useful for immediately running all configured checks and
submitting the results up to the appropriate NSCA servers.  If you
just want to exercise the checks and not do the NSCA submission, use the
B<--noop> flag in conjunction.

In runall mode, B<nlma> will attempt to drop privileges so that it runs
as the user and group in the configuration.  As such, you must either
run the command as that user initially, or as root.

B<nlma> will not fork off into the background when run with this argument.

=item B<--only>, B<-o> list,of,groups

A comma-separated list of check groups to run.  If you don't know why you
would need this, you don't need this.  This is only effective when paired
with B<--test>.

=item B<--all>

Run all checks, regardless of groups.  Equivalent to B<--only all>.
This is only effective when paired with B<--test>.

=item B<--match>, B<-m> I<match|regex>

Filter the list of checks to run (under B<--test>) to checks with names
matching the given regular expression.  Don't forget to quote as needed
to avoid bash parsing semantics!

This is only effective when paired with B<--test>.  If used in conjunction
with B<--only>, this will only filter the checks in the desired groups.

=item B<--noop>, B<-n>

When combined with B<--runall> (B<-t>), skip the submission of check results
to NSCA servers.  Note that all checks will actually be run, and incur any
side effects.

=item B<--env> I<PATTERN>

By default, B<nlma> will clean up its environment.  This option instructs it
to preserve all environment variables that match the Perl-compatible regular
expression I<PATTERN>.  This pattern will be implicitly anchored at both
beginning and end, so to match partial variable names you will need to use
globs (like --env 'TEST_.*').

=item B<--verbose>, B<-v>

Increase output in foreground mode (see B<--foreground>).  Can be specified
multiple times, for a cumulative effect.  nlma only honors up to three B<-v>
flags; B<-vvv> is equivalent to full debug mode.

=item B<--debug>, B<-D>

Run checks in debug mode, implying B<--noop>.  In debug mode, a single
check (matched with B<-m>) will be run with the --debug flag, to print out
helpful plugin debugging messages.

This is only applicable with B<--test>.

=item B<--trace>, B<-DDD>

Enable debug mode, but activate TRACE MODE for the check plugin run, to get
even B<more> diagnostic output.

=item B<--help>, B<-h>, B<-?>

Display a short (but informative!) help screen.

=back

=head1 ENVIRONMENT VARIABLES

By default, nlma will attempt to clean up its environment before it runs any
checks.  This ensures that environment variables with special meaning to the
plugins written against the Synacor Monitoring Plugin Framework are not
propagated accidentally from the callers environment.

The following variables will be removed, unless B<--env> preserves them:

=over

=item B<SUDO_USER>

The plugin framework uses the value in SUDO_USER (if present) to locate its
credentials store.  This makes it easier to test checks and perform one-off
runs, but makes it difficult to properly run C<nlma --test>.

=item B<TEST_*>

All environment variables that start with the prefix C<TEST_> are used by
the plugin framework for testing and development.  They should B<never> be
seen in a production context.

=back

=head1 CONFIGURATION

nlma uses YAML for its configuration language.  The nlma configuration file
has two parts (so-called "documents" in YAML-ese): one for global behavior
and one for checks.

A typical nlma config file looks like this:

  # nlma configuration (example)
  ---
  # GLOBAL OPTIONS
  parents:
    - primary.nagios.example.com:5667
    - standby.nagios.example.com:5667
  log:
    level:    error
    facility: daemon
  plugin_root: /opt/nagios/plugins
  ---
  # CHECK DEFINITIONS
  check_cpu:
    command: /usr/bin/check_cpu -w 80% -c 90%
    interval: 300
    timeout: 20
  check_memory:
    command: check_memory -w 80% -c 90%
    attempts: 4
    interval: 3600
    retry: 60
  check_apache
    command: check_apache
    sudo: root

Each section is preceded by the YAML document boundary, a single line
consisting of three hyphens (---).

=head2 Global Configuration

The global configuration section controls how nlma behaves overall.

=over

=item B<user>

User to run the poller as.  You are strongly encouraged to find or create
an account with fewer privileges than root.  Defaults to `icinga'.

=item B<group>

Group to run the poller as.  Defaults to `icinga'.

=item B<parents>

A sequence of Nagios parent servers, specified as I<host:port>, to which
nlma should submit check results.  More pedantically, these are the list
of NSCA endpoints.

If you don't specify these, nlma will happily schedule and run checks,
but never submit the results to anyone.

=item B<plugin_root>

nlma expects to be able to exec its check plugins without relying on the
value of $PATH (which is a good thing).  Since most of the time, check
plugins exist in a single directory, it becomes tedious and error-prone
to constantly specify the absolute path to each plugin.  Instead, admins
can set the plugin_root to that directory, and nlma will prepend it to
any check command that is a relative path (i.e. does not start with '/').

There is no default value for this configuration, and nlma will emit
warnings (but still proceed) if it detects relative plugin paths.

=item B<log>

Controls the logging subsystem.  Currently, two sub-keys are supported,
B<level> and B<facility>:

=over

=item B<level>

How verbose nlma will be when it logs.  One of B<error>, B<warning>,
B<info> or B<debug>.  If not specified, defaults to B<error>.  If you
want to see what nlma is doing, from a scheduling and execution
standpoint, B<info> is invaluable.

=item B<facility>

The syslog facility to log to.  Defaults to B<daemon>.

=back

=item B<hostname>

Manually specify the hostname that nlma will use as "this node's"
hostname when submitting check results.  If not specified, nlma will
attempt to determine the local node's primary hostname and use that.

Unless nlma has trouble reliably determining the local node's hostname,
it is best to leave this out of the configuration, and rely on the
default behavior.

=item B<checkin>

Controls how and when nlma will submit its own check result up,
indicating what it is doing and how well it is doing it.  Supports two
subkeys, B<service> and B<interval>:

=over

=item B<service>

The name of the service that nlma should submit its check-in result as.
Defaults to `nlma_checkin'

=item B<interval>

How often nlma should check in.  Defaults to 5 minutes.

=back

Every check-in, nlma will tally up how many checks it has run and
calculate the average run time of all check runs.  This result will
B<always> be an OK.

=item B<dump>

A directory that nlma can use to dump out configuration and state data,
in response to USR1 signals.  See the I<SIGNAL HANDLING> section later
for more details.  Defaults to /var/tmp

=item B<pid_file>

Path to store the running daemon's PID file in.  Ignored if running in
foreground mode.

=item B<errlog>

Path to a file that will be used to capture standard error from child
processes (like check plugins and send_nsca).  Defaults to
/var/log/nlma_err.

=item B<startup_splay>

Determines the global scheduling splay, used for groups that do not
have a custom B<splay> setting.  See B<SCHEDULING> for full details of
the NLMA scheduling algorithm.

The default value of 0 seconds causes nlma to calculate the appropriate
splay for scheduling, based on group and minimum interval.

=item B<groups>

Checks are scheduled according to the policy of their groups, or the
default policy.  This configuration subtree manages group-specific
settings.

It supports the following keys:

=over

=item B<splay>

The splay value for scheduling checks in this group.  If not specified,
the value is inherited from the global B<startup_splay> setting.

=back

=back

=head2 Check Definitions

The second section of the nlma configuration defines the set of checks
that nlma will schedule and run.  Each check is defined as a name and
a set of key-value pairs.

The name of the check will be used as the service name when submitting
check results up to Nagios.

The following attributes can be set on each check:

=over

=item B<command>

The full command to run when executing this check.

This should include all of the arguments you which to use, and should use
the fully-qualified path to the binary or script to run.  nlma will
execute this command, as-is, by specifying it as the only argument to
`/bin/sh -c` 

This attribute must be set.

=item B<interval>

How often to run this check, in seconds.

For example, to run a check every 15 minutes, specify its B<interval> as
900.  For purposes of scheduling, nlma does not count run-time against the
scheduling interval.  Therefore, if you specify a check interval of 15
seconds, and the plugin always runs for exactly 5 seconds, there will only
be a 10 seconds gap between the termination of one run and the start of
another.

The default interval is 300 seconds (5 minutes).

=item B<group>

Which group this service check belongs to.  Different groups are subject
to different scheduling policies.  Grouping also begins to matter when
running B<nlma --test>.

The default group is C<default>.

=item B<timeout>

How long (in seconds) to allow a check plugin to execute before killing it.

Internally, there are two timeouts for each check run; the soft timeout,
which this attribute controls, and the hard timeout, calculated as
B<timeout> + 2.  When the first timeout is reached, nlma will send SIGTERM
to the child process.  If the child doesn't exit within 2 seconds, the hard
timeout will be exceeded, and nlma will send the SIGKILL signal.

The default timeout is 30 seconds.

=item B<attempts>

The number of time to run the local check before considering the output
'official.'  This is intenionally very similar to Nagios's
max_check_attempts directive.

Defaults to 1 (no retry/confirmation).

=item B<retry>

A (usually) shorter time frame than B<interval>, used when multiple check
attempts have been configured.  Intentionally very similar to Nagios's
retry_interval.  If B<attempts> is set to 1, B<retry> is effectively
ignored.

Defaults to 60 seconds.

=item B<sudo>

Specify an alternate user to invoke this command as, via sudo.  If present,
nlma will automatically prepend '/usr/bin/sudo -n -u <user>' to the command,
while still taking into account the current value of B<plugin_root>.

By default, checks are not run with sudo, and will execute as the user running
the nlma daemon.  See B<user> under B<GLOBAL CONFIGURATION>

=item B<env>

A map of environment variable names to the values that they should have during
the execution of the check plugin.

=back

=head1 SCHEDULING

NLMA must schedule checks responsibly, by following these guidelines:

=over

=item 1. Checks Should Run Regularly

Other parts of the monitoring system depend on timely arrival of data from
NLMA instances, and often me decisions based on presence or absence of the
data.  It is vital that a check that should run every 5 minutes actually
runs every 5 minutes.

=item 2. Don't Overload The Host

NLMA should observe the local host with as little impact to its normal
operation as possible.  Checks should be spread out to avoid CPU clustering
that may negatively impact host performance.

=item 3. Handle Restarts Gracefully

The first two items need to be followed even through full restarts of the
NLMA daemon, since that is how Puppet deploys new NLMA configs.

=back

In order to follow all three of these guidelines, NLMA uses a group-based
scheduling algorithm.  Checks are divided up into groups, either explicitly
into named groups, or implicitly into the C<default> group.  Each group
has its own separate schedule that is not affected by checks in any other
group.

Every time a check finished executing, it is immediately rescheduled,
based on its I<interval> and the last execution time.  NLMA specifically
uses the last execution time to ensure that checks do not begin to drift
off-schedule because of latency in the check plugin.

Here is an example.  A check, local_mem, is configured to run every 2
minutes.  NLMA initially schedules it to run at 14:30:00, and begins
execution of the check plugin precisely on time.  The check takes 67.4
seconds to run, finishing at 14:31:17.4.  Then, NLMA reschedules it to
run again at 14:32:00, 2 minutes from 14:30:00.

In order to avoid overloading the monitored host, NLMA will spread out
initial scheduled runs of all checks within a group using the concept
of splay.

If a group has a non-zero, non-negative splay, checks will be spread out
accordingly:

    ---
    # global configuration
    groups:
      filers:
        splay: 120

    ---
    # check configurations

                                 # if we start at 13:15:00 ...
    check1:
      command: check1
      group:   filers            # check1 will run at 13:15:00

    check2:
      command: check2
      group:   filers            # check2 will run at 13:17:00

    check3:
      command: check3
      group:   filers            # check3 will run at 13:19:00

Splay can be auto-calculated.  A value of 0 (or a negative value) for
a group splay will cause NLMA to determine the smallest check interval
of all checks in the group, and then calculate an appropriate splay
value so that all checks in the group will be run in that time window.

For example, if a test group contains 15 checks, running at a mix of
intervals ranging from 5 minutes to 20 minutes, the automatic splay
would be 20 seconds, and all 15 checks would be initially scheduled
to run within 5 minutes.

Splay goes a long way to handle regular restarts, but constantly
restarting NLMA may lead to some checks never being run.  The solution
to this is decidedly low-tech: don't restart often, and use freshness
thresholds wisely.

=head1 SIGNAL HANDLING

Administrators can control a running nlma instance through standard UNIX
signals, and the kill(1) command.  nlma responds to signals as follows:

=over

=item B<SIGTERM>

Attempt to terminate gracefully.  No further check execution scheduling
takes place, and no new checks are run.  nlma will not, however, terminate
immediately, since it will wait for all of its child processes, be they
send_nsca processes or running check plugins, to exit.  For running check
plugins, nlma will kick off new send_nsca processes to report results.

Therefore, it is B<VERY IMPORTANT> that nlma not be killed outright with
kill -9, since it will be unable to report on the status of still-running
check plugins.

=item B<SIGHUP>

Attempt to reload configuration from the original files.  Note that it is
impossible for nlma to be reconfigured from a different configuration file
than it was started with.  When it receives the HUP signal, nlma will
re-read its configuration and alter its behavior accordingly.

If new checks are added, they are scheduled according to B<startup splay>
(see B<CONFIGURATION>).

If an existing check is removed, nlma will remove it from the list of
checks that can be scheduled, but will let an ongoing run of that check
finish and still report its status to Nagios.

=item B<SIGUSR1>

Dump configuration and scheduling data to a file.  SIGUSR1 allows an
administrator to look inside of a running nlma instance to see what it
is doing and how it is scheduling things.

Dump files are named according to the pattern nlma.<TIMESTAMP>.yml,
where <TIMESTAMP> is a high-resolution epoch timestamp with microsecond
resolution.  These files are written to the dump directory (see
B<CONFIGURATION>) which defaults to /var/tmp.

=back

=head1 CHECK PLUGINS

nlma expects its check plugins to behave the same way as standard Nagios
active check plugins: output a single line of useful data, and exit with
a specific exit code to indicate check status:

=over

=item 0 - OK

=item 1 - WARNING

=item 2 - CRITICAL

=item 3 - UNKNOWN

=back

=head1 AUTHOR

nlma was written by James Hunt <jhunt@synacor.com>.

=head1 BUGS

None yet.

=cut

