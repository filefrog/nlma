#!/usr/bin/perl

#
# nlma - Nagios Polling Daemon
#
# author:  James Hunt <jhunt@synacor.com>
# created: 2012-03-17
#

use warnings;
use strict;

use Nagios::Agent;
use Getopt::Long;
use Log::Log4perl qw(:easy);

my $DEFAULT_CONFIG_FILE_PATH = "/etc/nlma.yml";

sub usage
{
	print "USAGE: $0 [-hF] [-vvv] [-c /path/to/config.yml]\n";
	print "\n";
	print "OPTIONS\n";
	print "\n";
	print "  --config, -c /path/to/config.yml\n";
	print "      Specify a different configuration.\n";
	print "      Default is $DEFAULT_CONFIG_FILE_PATH\n";
	print "\n";
	print "  --help, -h, -?\n";
	print "      Show this help message.\n";
	print "\n";
	print "  --foreground, -F\n";
	print "      Don't detach to run in the background.\n";
	print "      By default, nlma tries to daemonize.\n";
	print "\n";
	print " --runall, --test, -t\n";
	print "      Ignore scheduling and execute all configured\n";
	print "      checks serially; useful for testing.\n";
	print "\n";
	print " --verbose, -v\n";
	print "      Increase verbosity.  Can be used multiple\n";
	print "      times for increase verbosity.\n";
	print "\n";
}

my %opt = (
	config => $DEFAULT_CONFIG_FILE_PATH,
	verbose => 0,
	foreground => undef
);

Getopt::Long::Configure qw(bundling);
GetOptions(\%opt,
	"config|c=s",
	"help|h|?",
	"foreground|F",
	"runall|test|t",
	"verbose|v+",
);

if ($opt{help}) {
	usage;
	exit(0);
}

if ($opt{runall}) {
	Log::Log4perl->easy_init($DEBUG) if $opt{verbose} > 0;
	Nagios::Agent->runall($opt{config});
} else {
	if ($opt{foreground}) {
		my $level = $ERROR;
		my $name  = "ERROR";

		if ($opt{verbose} == 1) {
			$level = $WARN;
			$name  = "WARN";

		} elsif ($opt{verbose} == 2) {
			$level = $INFO;
			$name  = "INFO";

		} elsif ($opt{verbose} >= 3) {
			$level = $DEBUG;
			$name  = "DEBUG";
		}
		Log::Log4perl->easy_init($level);
		ALWAYS("log level set to $name");
	}
	Nagios::Agent->start($opt{config}, $opt{foreground});
}

=pod

=head1 NAME

B<nlma> - The Nagios Polling Daemon

=head1 SYNOPSIS

nlma [-hFv] [-c /path/to/config.yml]

=head1 DESCRIPTION

The Nagios Agent is a host-side monitoring agent that schedules and runs
check plugins on the local host, translates their output and exit codes,
and then reports this information up to one or more Nagios/Icinga parent
servers via NSCA.

It features a high-resolution clock for both scheduling and tracking plugin
runs, and also implements retry logic similar to what Nagios uses for its
active checks.

=head1 OPTIONS

=over

=item B<--config>, B<-c> I</path/to/config.yml>

By default, nlma uses /etc/nlma.yml for configuration of both behavior
and check definitions; this option lets you specify a different path.

=item B<--foreground>, B<-F>

Force nlma to remain in the foreground, instead of forking off as a daemon
process.  In foreground mode, nlma will automatically redirect all logging
to standard error, and honor the B<-v> flags.

=item B<--verbose>, B<-v>

Increase output in foreground mode (see B<--foreground>).  Can be specified
multiple times, for a cumulative effect.  nlma only honors up to three B<-v>
flags; B<-vvv> is equivalent to full debug mode.

=item B<--help>, B<-h>, B<-?>

Display a short (but informative!) help screen.

=back

=head1 CONFIGURATION

nlma uses YAML for its configuration language.  The nlma configuration file
has two parts (so-called "documents" in YAML-ese): one for global behavior
and one for checks.

A typical nlma config file looks like this:

  # nlma configuration (example)
  ---
  # GLOBAL OPTIONS
  parents:
    - primary.nagios.example.com:5667
    - standby.nagios.example.com:5667
  log:
    level:    error
    facility: daemon
  plugin_root: /opt/nagios/plugins
  ---
  # CHECK DEFINITIONS
  check_cpu:
    command: /usr/bin/check_cpu -w 80% -c 90%
    interval: 300
    timeout: 20
  check_memory:
    command: check_memory -w 80% -c 90%
    attempts: 4
    interval: 3600
    retry: 60
  check_apache
    command: check_apache
    sudo: root

Each section is preceded by the YAML document boundary, a single line
consisting of three hyphens (---).

=head2 Global Configuration

The global configuration section controls how nlma behaves overall.

=over

=item B<user>

User to run the poller as.  You are strongly encouraged to find or create
an account with fewer privileges than root.  Defaults to `icinga'.

=item B<group>

Group to run the poller as.  Defaults to `icinga'.

=item B<parents>

A sequence of Nagios parent servers, specified as I<host:port>, to which
nlma should submit check results.  More pedantically, these are the list
of NSCA endpoints.

If you don't specify these, nlma will happily schedule and run checks,
but never submit the results to anyone.

=item B<plugin_root>

nlma expects to be able to exec its check plugins without relying on the
value of $PATH (which is a good thing).  Since most of the time, check
plugins exist in a single directory, it becomes tedious and error-prone
to constantly specify the absolute path to each plugin.  Instead, admins
can set the plugin_root to that directory, and nlma will prepend it to
any check command that is a relative path (i.e. does not start with '/').

There is no default value for this configuration, and nlma will emit
warnings (but still proceed) if it detects relative plugin paths.

=item B<log>

Controls the logging subsystem.  Currently, two sub-keys are supported,
B<level> and B<facility>:

=over

=item B<level>

How verbose nlma will be when it logs.  One of B<error>, B<warning>,
B<info> or B<debug>.  If not specified, defaults to B<error>.  If you
want to see what nlma is doing, from a scheduling and execution
standpoint, B<info> is invaluable.

=item B<facility>

The syslog facility to log to.  Defaults to B<daemon>.

=back

=item B<hostname>

Manually specify the hostname that nlma will use as "this node's"
hostname when submitting check results.  If not specified, nlma will
attempt to determine the local node's primary hostname and use that.

Unless nlma has trouble reliably determining the local node's hostname,
it is best to leave this out of the configuration, and rely on the
default behavior.

=item B<checkin>

Controls how and when nlma will submit its own check result to Nagios,
indicating what it is doing and how well it is doing it.  Supports two
subkeys, B<service> and B<interval>:

=over

=item B<service>

The name of the service that nlma should submit its check-in result as.
Defaults to `nlma_checkin'

=item B<interval>

How often nlma should check in.  Defaults to 5 minutes.

=back

Every check-in, nlma will tally up how many checks it has run and
calculate the average run time of all check runs.  This result will
B<always> be an OK.

=item B<dump>

A directory that nlma can use to dump out configuration and state data,
in response to USR1 signals.  See the I<SIGNAL HANDLING> section later
for more details.  Defaults to /var/tmp

=item B<pid_file>

Path to store the running daemon's PID file in.  Ignored if running in
foreground mode.

=item B<errlog>

Path to a file that will be used to capture standard error from child
processes (like check plugins and send_nsca).  Defaults to
/var/log/nlma_err.

=item B<startup_splay>

When nlma starts up, it will try to schedule all defined checks to run
as quickly as possible.  The I<startup splay> influences this behavior,
and specifies an amount of time (in seconds) to spread each check out.
The default value of 15 seconds causes nlma to schedule each initial
check run 15 seconds apart.

=back

=head2 Check Definitions

The second section of the nlma configuration defines the set of checks
that nlma will schedule and run.  Each check is defined as a name and
a set of key-value pairs.

The name of the check will be used as the service name when submitting
check results up to Nagios.

The following attributes can be set on each check:

=over

=item B<command>

The full command to run when executing this check.

This should include all of the arguments you which to use, and should use
the fully-qualified path to the binary or script to run.  nlma will
execute this command, as-is, by specifying it as the only argument to
`/bin/sh -c` 

This attribute must be set.

=item B<interval>

How often to run this check, in seconds.

For example, to run a check every 15 minutes, specify its B<interval> as
900.  For purposes of scheduling, nlma does not count run-time against the
scheduling interval.  Therefore, if you specify a check interval of 15
seconds, and the plugin always runs for exactly 5 seconds, there will only
be a 10 seconds gap between the termination of one run and the start of
another.

The default interval is 300 seconds (5 minutes).

=item B<timeout>

How long (in seconds) to allow a check plugin to execute before killing it.

Internally, there are two timeouts for each check run; the soft timeout,
which this attribute controls, and the hard timeout, calculated as
B<timeout> + 2.  When the first timeout is reached, nlma will send SIGTERM
to the child process.  If the child doesn't exit within 2 seconds, the hard
timeout will be exceeded, and nlma will send the SIGKILL signal.

The default timeout is 30 seconds.

=item B<attempts>

The number of time to run the local check before considering the output
'official.'  This is intenionally very similar to Nagios/Icinga's
max_check_attempts directive.

Defaults to 1 (no retry/confirmation).

=item B<retry>

A (usually) shorter time frame than B<interval>, used when multiple check
attempts have been configured.  Intentionally very similar to Nagios/Icinga's
retry_interval.  If B<attempts> is set to 1, B<retry> is effectively
ignored.

Defaults to 60 seconds.

=item B<sudo>

Specify an alternate user to invoke this command as, via sudo.  If present,
nlma will automatically prepend '/usr/bin/sudo -n -u <user>' to the command,
while still taking into account the current value of B<plugin_root>.

By default, checks are not run with sudo, and will execute as the user running
the nlma daemon.  See B<user> under B<GLOBAL CONFIGURATION>

=back

=head1 SCHEDULING

=head1 SIGNAL HANDLING

Administrators can control a running nlma instance through standard UNIX
signals, and the kill(1) command.  nlma responds to signals as follows:

=over

=item B<SIGTERM>

Attempt to terminate gracefully.  No further check execution scheduling
takes place, and no new checks are run.  nlma will not, however, terminate
immediately, since it will wait for all of its child processes, be they
send_nsca processes or running check plugins, to exit.  For running check
plugins, nlma will kick off new send_nsca processes to report results.

Therefore, it is B<VERY IMPORTANT> that nlma not be killed outright with
kill -9, since it will be unable to report on the status of still-running
check plugins.

=item B<SIGHUP>

Attempt to reload configuration from the original files.  Note that it is
impossible for nlma to be reconfigured from a different configuration file
than it was started with.  When it receives the HUP signal, nlma will
re-read its configuration and alter its behavior accordingly.

If new checks are added, they are scheduled according to B<startup splay>
(see B<CONFIGURATION>).

If an existing check is removed, nlma will remove it from the list of
checks that can be scheduled, but will let an ongoing run of that check
finish and still report its status to Nagios.

=item B<SIGUSR1>

Dump configuration and scheduling data to a file.  SIGUSR1 allows an
administrator to look inside of a running nlma instance to see what it
is doing and how it is scheduling things.

Dump files are named according to the pattern nlma.<TIMESTAMP>.yml,
where <TIMESTAMP> is a high-resolution epoch timestamp with microsecond
resolution.  These files are written to the dump directory (see
B<CONFIGURATION>) which defaults to /var/tmp.

=back

=head1 CHECK PLUGINS

nlma expects its check plugins to behave the same way as standard Nagios
active check plugins: output a single line of useful data, and exit with
a specific exit code to indicate check status:

=over

=item 0 - OK

=item 1 - WARNING

=item 2 - CRITICAL

=item 3 - UNKNOWN

=back

=head1 AUTHOR

nlma was written by James Hunt <jhunt@synacor.com>.

=head1 BUGS

None yet.

=cut

